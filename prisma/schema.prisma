// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  name String @db.VarChar(100)
  age Int?
  phone String? @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post[] @relation("UserPost")
  profile Profile? @relation("UserProfile")
  likes Like[]
  @@map("users")
}

model Post{
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  title String @db.VarChar(100)
  description String? @db.Text
  content String @db.LongText
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user User @relation(name: "UserPost", fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]
  @@map("posts")
}

model Profile{
  id Int @id @default(autoincrement())
  userId Int @map("user_id") @unique
  bio String? @db.Text 
  address String? @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(name: "UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  @@map("profiles")
}

model Like{
  userId Int @map("user_id")
  postId Int  @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@id([userId,postId])
  @@map("likes")
}